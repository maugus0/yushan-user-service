name: User Service CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
    types: [opened, synchronize, reopened]

# Avoid overlapping runs
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read
  checks: write
  pull-requests: write
  security-events: write
  packages: write

jobs:
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    permissions:
      contents: read
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'
        cache: maven
        
    - name: Run Unit Tests
      run: ./mvnw test -Dtest='!**/integration/**,!**/IntegrationTest' -Dspring.profiles.active=test

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    permissions:
      contents: read
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'
        cache: maven
        
    - name: Run Integration Tests
      run: ./mvnw test -Dtest='**/integration/**,**/IntegrationTest' -Dspring.profiles.active=integration-test
      env:
        CI: true

  lint-quality:
    name: Lint & Quality Checks
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests]
    permissions:
      contents: read
      security-events: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'
        cache: maven
        
    - name: Run SpotBugs (static analysis)
      run: ./mvnw spotbugs:check
      
    - name: Run Checkstyle (code style)
      run: ./mvnw checkstyle:check
      
    - name: Generate SpotBugs SARIF
      run: ./mvnw spotbugs:spotbugs -Dspotbugs.outputFormat=sarif -Dspotbugs.outputFile=spotbugs.sarif
      
    - name: Check if SARIF file exists
      run: |
        echo "Checking for spotbugs.sarif file..."
        ls -la spotbugs.sarif || echo "File not found"
        if [ -f spotbugs.sarif ]; then
          echo "File exists, size: $(wc -c < spotbugs.sarif) bytes" 
          head -5 spotbugs.sarif || echo "File is empty or unreadable"
        fi
      
    - name: Upload SpotBugs SARIF to GitHub
      if: always() && hashFiles('spotbugs.sarif') != ''
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: spotbugs.sarif
        
    - name: Run Unit Tests and generate JaCoCo coverage
      run: ./mvnw -B -Dspring.profiles.active=test test jacoco:report
      
    - name: Run SonarCloud Analysis (use compiled classes and JaCoCo report)
      run: |
        ./mvnw -B sonar:sonar \
          -Dsonar.coverage.jacoco.xmlReportPaths=target/site/jacoco/jacoco.xml \
          -Dsonar.java.binaries=target/classes
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests]
    permissions:
      contents: read
      security-events: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'
        cache: maven
        
    - name: Cache OWASP Dependency-Check data
      uses: actions/cache@v4
      with:
        path: ~/.m2/repository/org/owasp/dependency-check-data
        key: ${{ runner.os }}-dc-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-dc-
    
    - name: Configure Maven settings for OSS Index
      run: |
        mkdir -p ~/.m2
        cat > ~/.m2/settings.xml <<XML
        <settings>
          <servers>
            <server>
              <id>ossindex</id>
              <username>${OSSINDEX_USER}</username>
              <password>${OSSINDEX_TOKEN}</password>
            </server>
          </servers>
        </settings>
        XML
      env:
        OSSINDEX_USER: ${{ secrets.OSSINDEX_USER }}
        OSSINDEX_TOKEN: ${{ secrets.OSSINDEX_TOKEN }}
        
    - name: Run OWASP Dependency Check
      env:
        NVD_API_KEY: ${{ secrets.NVD_API_KEY }}
      run: ./mvnw -Dnvd.api.key="${NVD_API_KEY}" org.owasp:dependency-check-maven:check
      
    - name: Upload Dependency-Check SARIF
      if: always() && hashFiles('target/dependency-check-report.sarif') != ''
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: target/dependency-check-report.sarif
      
    - name: Upload OWASP Report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: owasp-dependency-check-report
        path: |
          target/dependency-check-report.html
          target/dependency-check-report.xml
        
    - name: Build (skip tests)
      run: ./mvnw -B -DskipTests package
      
    - name: Setup Snyk CLI
      uses: snyk/actions/setup@master
      
    - name: Snyk test (export SARIF)
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      run: |
        snyk auth "$SNYK_TOKEN"
        snyk test \
          --file=pom.xml \
          --package-manager=maven \
          --project-name=${{ github.repository }} \
          --severity-threshold=high \
          --sarif --sarif-file-output=snyk.sarif
      
    - name: Upload Snyk result to GitHub Code Scanning
      if: always() && hashFiles('snyk.sarif') != ''
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: snyk.sarif

  docker-build:
    name: Build Docker Image & Scan Vulnerabilities
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests, lint-quality, security-scan]
    permissions:
      contents: read
      packages: write
      security-events: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Cache Maven dependencies for Docker build
      uses: actions/cache@v4
      with:
        path: ~/.m2/repository
        key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-maven-

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ghcr.io/${{ github.repository }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha
          type=raw,value=${{ github.sha }}
          type=raw,value=latest,enable={{is_default_branch}}
          type=raw,value=staging,enable=${{ github.ref == 'refs/heads/main' }}
          
    - name: Build and push Docker image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          BUILDKIT_INLINE_CACHE=1
        secrets: |
          maven_repo=${{ github.workspace }}/.m2/repository
        
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ghcr.io/${{ github.repository }}@${{ steps.build.outputs.digest }}
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always() && hashFiles('trivy-results.sarif') != ''
      with:
        sarif_file: 'trivy-results.sarif'

    - name: Check if Trivy SARIF exists
      run: |
        echo "Checking for trivy-results.sarif file..."
        ls -la trivy-results.sarif || echo "File not found"
        if [ -f trivy-results.sarif ]; then
          echo "File exists, size: $(wc -c < trivy-results.sarif) bytes"
        fi

    - name: Upload Trivy SARIF as artifact
      uses: actions/upload-artifact@v4
      if: always() && hashFiles('trivy-results.sarif') != ''
      with:
        name: trivy-sarif
        path: trivy-results.sarif

    # Save image digest for production promotion
    - name: Save image digest
      run: echo "${{ steps.build.outputs.digest }}" > image-digest.txt

    - name: Upload image digest artifact
      uses: actions/upload-artifact@v4
      with:
        name: image-digest
        path: image-digest.txt
        retention-days: 30

  generate-reports:
    name: Generate CI Summary & Collect Reports
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests, lint-quality, security-scan, docker-build]
    if: always()
    permissions:
      contents: read
      checks: write
      security-events: write
    steps:
    - name: Download OWASP report
      uses: actions/download-artifact@v4
      if: always()
      with:
        name: owasp-dependency-check-report
        path: reports/owasp
      continue-on-error: true

    - name: Download Trivy SARIF
      uses: actions/download-artifact@v4
      if: always()
      with:
        name: trivy-sarif
        path: reports/trivy
      continue-on-error: true

    - name: Create empty Trivy report if missing
      run: |
        if [ ! -f reports/trivy/trivy-results.sarif ]; then
          echo "Creating empty Trivy report..."
          mkdir -p reports/trivy
          echo '{"version": "2.1.0", "runs": []}' > reports/trivy/trivy-results.sarif
        fi
      continue-on-error: true

    - name: Create CI summary
      if: always()
      run: |
        {
          echo "# User Service – CI Reports";
          echo "- Commit: $GITHUB_SHA";
          echo "- Branch: ${GITHUB_REF##*/}";
          echo "- Event: ${{ github.event_name }}";
          echo "";
          echo "## Artifacts";
          if [ -f reports/owasp/dependency-check-report.html ]; then 
            echo "- OWASP Dependency-Check: reports/owasp/dependency-check-report.html"; 
          else 
            echo "- OWASP Dependency-Check: Not available (artifact not found or expired)"; 
          fi
          if [ -f reports/trivy/trivy-results.sarif ]; then 
            echo "- Trivy SARIF: reports/trivy/trivy-results.sarif"; 
          else 
            echo "- Trivy SARIF: Not available (artifact not found or expired)"; 
          fi
        } > summary.md

    - name: Upload consolidated report bundle
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: ci-reports
        path: |
          summary.md
          reports/**