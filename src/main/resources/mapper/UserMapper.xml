<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.yushan.user_service.dao.UserMapper">
  <resultMap id="BaseResultMap" type="com.yushan.user_service.entity.User">
    <constructor>
      <idArg column="uuid" javaType="java.util.UUID" jdbcType="OTHER" />
      <arg column="email" javaType="java.lang.String" jdbcType="VARCHAR" />
      <arg column="username" javaType="java.lang.String" jdbcType="VARCHAR" />
      <arg column="hash_password" javaType="java.lang.String" jdbcType="VARCHAR" />
      <arg column="avatar_url" javaType="java.lang.String" jdbcType="VARCHAR" />
      <arg column="profile_detail" javaType="java.lang.String" jdbcType="VARCHAR" />
      <arg column="birthday" javaType="java.util.Date" jdbcType="DATE" />
      <arg column="gender" javaType="java.lang.Integer" jdbcType="INTEGER" />
      <arg column="status" javaType="java.lang.Integer" jdbcType="INTEGER" />
      <arg column="is_author" javaType="java.lang.Boolean" jdbcType="BIT" />
      <arg column="is_admin" javaType="java.lang.Boolean" jdbcType="BIT" />
      <arg column="create_time" javaType="java.util.Date" jdbcType="TIMESTAMP" />
      <arg column="update_time" javaType="java.util.Date" jdbcType="TIMESTAMP" />
      <arg column="last_login" javaType="java.util.Date" jdbcType="TIMESTAMP" />
      <arg column="last_active" javaType="java.util.Date" jdbcType="TIMESTAMP" />
    </constructor>
  </resultMap>
  <sql id="Base_Column_List">
    uuid, email, username, hash_password, avatar_url, profile_detail,
    birthday, gender, status, is_author, is_admin,
    create_time, update_time, last_login, last_active
  </sql>
  <select id="selectByPrimaryKey" parameterType="java.util.UUID" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from users
    where uuid = #{uuid,jdbcType=OTHER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.util.UUID">
    delete from users
    where uuid = #{uuid,jdbcType=OTHER}
  </delete>
  <insert id="insert" parameterType="com.yushan.user_service.entity.User">
    insert into users (uuid, email, username,
      hash_password, avatar_url,
      profile_detail, birthday, gender,
      status, is_author, is_admin,
      create_time, update_time,
      last_login, last_active)
    values (#{uuid,jdbcType=OTHER}, #{email,jdbcType=VARCHAR}, #{username,jdbcType=VARCHAR},
      #{hashPassword,jdbcType=VARCHAR}, #{avatarUrl,jdbcType=VARCHAR},
      #{profileDetail,jdbcType=VARCHAR}, #{birthday,jdbcType=DATE}, #{gender,jdbcType=INTEGER},
      #{status,jdbcType=INTEGER}, #{isAuthor,jdbcType=BIT}, #{isAdmin,jdbcType=BIT},
      NOW(), NOW(),
      NOW(), NOW())
  </insert>
  <insert id="insertSelective" parameterType="com.yushan.user_service.entity.User">
    insert into users
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="uuid != null">
        uuid,
      </if>
      <if test="email != null">
        email,
      </if>
      <if test="username != null">
        username,
      </if>
      <if test="hashPassword != null">
        hash_password,
      </if>
      <if test="avatarUrl != null">
        avatar_url,
      </if>
      <if test="profileDetail != null">
        profile_detail,
      </if>
      <if test="birthday != null">
        birthday,
      </if>
      <if test="gender != null">
        gender,
      </if>
      <if test="status != null">
        status,
      </if>
      <if test="isAuthor != null">
        is_author,
      </if>
      <if test="isAdmin != null">
        is_admin,
      </if>
        create_time,
        update_time,
        last_login,
        last_active,
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="uuid != null">
        #{uuid,jdbcType=OTHER},
      </if>
      <if test="email != null">
        #{email,jdbcType=VARCHAR},
      </if>
      <if test="username != null">
        #{username,jdbcType=VARCHAR},
      </if>
      <if test="hashPassword != null">
        #{hashPassword,jdbcType=VARCHAR},
      </if>
      <if test="avatarUrl != null">
        #{avatarUrl,jdbcType=VARCHAR},
      </if>
      <if test="profileDetail != null">
        #{profileDetail,jdbcType=VARCHAR},
      </if>
      <if test="birthday != null">
        #{birthday,jdbcType=DATE},
      </if>
      <if test="gender != null">
        #{gender,jdbcType=INTEGER},
      </if>
      <if test="status != null">
        #{status,jdbcType=INTEGER},
      </if>
      <if test="isAuthor != null">
        #{isAuthor,jdbcType=BIT},
      </if>
      <if test="isAdmin != null">
        #{isAdmin,jdbcType=BIT},
      </if>
        NOW(),
        NOW(),
        NOW(),
        NOW(),
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.yushan.user_service.entity.User">
    update users
    <set>
      <if test="email != null">
        email = #{email,jdbcType=VARCHAR},
      </if>
      <if test="username != null">
        username = #{username,jdbcType=VARCHAR},
      </if>
      <if test="hashPassword != null">
        hash_password = #{hashPassword,jdbcType=VARCHAR},
      </if>
      <if test="avatarUrl != null">
        avatar_url = #{avatarUrl,jdbcType=VARCHAR},
      </if>
      <if test="profileDetail != null">
        profile_detail = #{profileDetail,jdbcType=VARCHAR},
      </if>
      <if test="birthday != null">
        birthday = #{birthday,jdbcType=DATE},
      </if>
      <if test="gender != null">
        gender = #{gender,jdbcType=INTEGER},
      </if>
      <if test="status != null">
        status = #{status,jdbcType=INTEGER},
      </if>
      <if test="isAuthor != null">
        is_author = #{isAuthor,jdbcType=BIT},
      </if>
      <if test="isAdmin != null">
        is_admin = #{isAdmin,jdbcType=BIT},
      </if>
      <if test="createTime != null">
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
        update_time = NOW(),
      <if test="lastLogin != null">
        last_login = #{lastLogin,jdbcType=TIMESTAMP},
      </if>
      <if test="lastActive != null">
        last_active = #{lastActive,jdbcType=TIMESTAMP},
      </if>
    </set>
    where uuid = #{uuid,jdbcType=OTHER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.yushan.user_service.entity.User">
    update users
    set email = #{email,jdbcType=VARCHAR},
      username = #{username,jdbcType=VARCHAR},
      hash_password = #{hashPassword,jdbcType=VARCHAR},
      avatar_url = #{avatarUrl,jdbcType=VARCHAR},
      profile_detail = #{profileDetail,jdbcType=VARCHAR},
      birthday = #{birthday,jdbcType=DATE},
      gender = #{gender,jdbcType=INTEGER},
      status = #{status,jdbcType=INTEGER},
      is_author = #{isAuthor,jdbcType=BIT},
      is_admin = #{isAdmin,jdbcType=BIT},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      update_time = NOW(),
      last_login = #{lastLogin,jdbcType=TIMESTAMP},
      last_active = #{lastActive,jdbcType=TIMESTAMP}
    where uuid = #{uuid,jdbcType=OTHER}
  </update>

    <select id="selectByEmail" parameterType="java.lang.String" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List" />
        from users
        where email = #{email,jdbcType=VARCHAR}
    </select>

    <sql id="AdminUserFilter_Where">
        <where>
            <if test="filter.status != null">
                AND status = #{filter.status.code}
            </if>
            <if test="filter.isAdmin != null">
                AND is_admin = #{filter.isAdmin}
            </if>
            <if test="filter.isAuthor != null">
                AND is_author = #{filter.isAuthor}
            </if>
        </where>
    </sql>

    <select id="selectUsersForAdmin" resultMap="BaseResultMap">
        SELECT
        <include refid="Base_Column_List" />
        FROM users
        <include refid="AdminUserFilter_Where" />
        <choose>
            <when test="filter.sortBy == 'createTime' and filter.sortOrder == 'asc'">
                ORDER BY create_time ASC
            </when>
            <otherwise>
                ORDER BY create_time DESC
            </otherwise>
        </choose>
        LIMIT #{filter.size} OFFSET #{offset}
    </select>

    <select id="countUsersForAdmin" resultType="long">
        SELECT COUNT(*)
        FROM users
        <include refid="AdminUserFilter_Where" />
    </select>

    <select id="selectAllUsersForRanking" resultMap="BaseResultMap">
        SELECT <include refid="Base_Column_List" /> FROM users WHERE is_admin = false and status = 0
    </select>

    <select id="selectByUuids" resultMap="BaseResultMap">
        select <include refid="Base_Column_List" /> from users
        where uuid IN
        <foreach item="uuid" collection="list" open="(" separator="," close=")">
            #{uuid, jdbcType=OTHER}
        </foreach>
    </select>
</mapper>