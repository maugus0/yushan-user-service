<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE generatorConfiguration
        PUBLIC "-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN"
        "http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd">

<generatorConfiguration>
    <!-- Import property configuration -->
    <properties resource="generator.properties"></properties>

    <!-- Specify the location of the JDBC driver jar package for the specific database -->
    <classPathEntry location="${jdbc.driverLocation}"/>

    <context id="default" targetRuntime="MyBatis3">

        <!-- Optional, controls comments when creating classes -->
        <commentGenerator>
            <property name="suppressDate" value="true"/>
            <property name="suppressAllComments" value="true"/>
        </commentGenerator>

        <!-- JDBC database connection -->
        <jdbcConnection
                driverClass="${jdbc.driverClass}"
                connectionURL="${jdbc.connectionURL}"
                userId="${jdbc.userId}"
                password="${jdbc.password}">
        </jdbcConnection>


        <!-- Optional, type handler, controls conversion between database types and Java types -->
        <javaTypeResolver>
            <property name="forceBigDecimals" value="false"/>
        </javaTypeResolver>


        <!-- Model generator, used to generate classes with primary keys, record classes and query Example classes
            targetPackage     Specify the package name where the generated model is located
            targetProject     Specify the path in the project
        -->
        <javaModelGenerator targetPackage="com.yushan.user_service.entity"
                            targetProject="src/main/java">

            <!-- Whether to allow sub-packages, i.e., targetPackage.schemaName.tableName -->
            <property name="enableSubPackages" value="false"/>
            <!-- Whether to add constructor to model -->
            <property name="constructorBased" value="true"/>
            <!-- Whether to trim CHAR type column data -->
            <property name="trimStrings" value="true"/>
            <!-- Whether the generated Model object is immutable, i.e., the generated Model object will not have setter methods, only constructor methods -->
            <property name="immutable" value="false"/>
        </javaModelGenerator>

        <!-- Directory where Mapper mapping files are generated, generates corresponding SqlMap files for each database table -->
        <sqlMapGenerator targetPackage="mapper"
                         targetProject="src/main/resources">
            <property name="enableSubPackages" value="false"/>
        </sqlMapGenerator>

        <!-- Client code, generates easy-to-use code for Model objects and XML configuration files
                type="ANNOTATEDMAPPER", generates Java Model and annotation-based Mapper objects
                type="MIXEDMAPPER", generates annotation-based Java Model and corresponding Mapper objects
                type="XMLMAPPER", generates SQLMap XML files and independent Mapper interfaces
        -->
        <javaClientGenerator targetPackage="com.yushan.user_service.dao"
                             targetProject="src/main/java" type="XMLMAPPER">
            <property name="enableSubPackages" value="true"/>
        </javaClientGenerator>

        <!-- Example table configuration (uncomment to enable) -->
        <!-- <table tableName="your_table_name" domainObjectName="YourEntityName"
               enableCountByExample="false" enableUpdateByExample="false"
               enableDeleteByExample="false" enableSelectByExample="false"
               selectByExampleQueryId="false">
        </table> -->
    </context>
</generatorConfiguration>
